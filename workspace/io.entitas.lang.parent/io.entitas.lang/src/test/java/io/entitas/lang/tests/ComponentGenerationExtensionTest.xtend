/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import io.entitas.lang.dsl.Root
import static extension io.entitas.lang.generator.entitas_csharp.ComponentGenerationExtension.*

@RunWith(XtextRunner)
@InjectWith(DSLInjectorProvider)
class ComponentGenerationExtensionTest {
	@Inject
	ParseHelper<Root> parseHelper
	
	@Test
	def void componentInterfaceGenerationTest() {
		val result = parseHelper.parse('''
			target A
			context Core
			alias i32 : "int"
			comp Finished in Core
			comp Position in Core
				x : i32
				y : i32
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public interface IFinishedComponent : IComponent {}
		'''.toString, 
		result.components.get(0).componentInterface("A").toString
		)
		Assert.assertEquals('''
		public interface IPositionComponent : IComponent {
			int x { get; }
			int y { get; }
		}
		'''.toString, 
		result.components.get(1).componentInterface("A").toString
		)
	}
	
	@Test
	def void componentClassGenerationTest() {
		val result = parseHelper.parse('''
			target A
			context Core
			alias i32 : "int"
			comp Finished in Core
			comp Position in Core
				x : i32
				y : i32
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public sealed partial class FinishedComponent : IFinishedComponent {}
		'''.toString, 
		result.components.get(0).componentClass("A").toString
		)
		Assert.assertEquals('''
		public sealed partial class PositionComponent : IPositionComponent {
			public int x { get; set; }
			public int y { get; set; }
		}
		'''.toString, 
		result.components.get(1).componentClass("A").toString
		)
	}
	
	@Test
	def void componentEntityExtensionForFlagComponent() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Finished in Core, Input
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreEntity {
			static readonly FinishedComponent finishedComponent = new FinishedComponent();
			public bool isFinished {
				get { return HasComponent(CoreComponentsLookup.Finished); }
				set {
					if(value != isFinished) {
						if(value) {
							AddComponent(CoreComponentsLookup.Finished, finishedComponent);
						} else {
							RemoveComponent(CoreComponentsLookup.Finished);
						}
					}
				}
			}
		}
		public partial class InputEntity {
			static readonly FinishedComponent finishedComponent = new FinishedComponent();
			public bool isFinished {
				get { return HasComponent(InputComponentsLookup.Finished); }
				set {
					if(value != isFinished) {
						if(value) {
							AddComponent(InputComponentsLookup.Finished, finishedComponent);
						} else {
							RemoveComponent(InputComponentsLookup.Finished);
						}
					}
				}
			}
		}
		'''.toString, 
		result.components.get(0).entityExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentEntityExtensionForFlagComponentWithPrefix() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Finished prefix("did")
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreEntity {
			static readonly FinishedComponent finishedComponent = new FinishedComponent();
			public bool didFinished {
				get { return HasComponent(CoreComponentsLookup.Finished); }
				set {
					if(value != didFinished) {
						if(value) {
							AddComponent(CoreComponentsLookup.Finished, finishedComponent);
						} else {
							RemoveComponent(CoreComponentsLookup.Finished);
						}
					}
				}
			}
		}
		'''.toString, 
		result.components.get(0).entityExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentEntityExtensionForComponent() {
		val result = parseHelper.parse('''
			target A
			context Core, Input, Map
			alias i32 : "int"
			comp Position in Core, Map
				x : i32
				y : i32
				z : i32
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreEntity {
			public IPositionComponent position { get { return (IPositionComponent)GetComponent(CoreComponentsLookup.Position); } }
			public bool hasPosition { get { return HasComponent(CoreComponentsLookup.Position); } }
		
			public void AddPosition(int newX, int newY, int newZ) {
				var component = CreateComponent<PositionComponent>(CoreComponentsLookup.Position);
				component.x = newX;
				component.y = newY;
				component.z = newZ;
				AddComponent(CoreComponentsLookup.Position, component);
			}
		
			public void ReplacePosition(int newX, int newY, int newZ) {
				var component = CreateComponent<PositionComponent>(CoreComponentsLookup.Position);
				component.x = newX;
				component.y = newY;
				component.z = newZ;
				ReplaceComponent(CoreComponentsLookup.Position, component);
			}
		
			public void RemovePosition() {
				RemoveComponent(CoreComponentsLookup.Position);
			}
		}
		public partial class MapEntity {
			public IPositionComponent position { get { return (IPositionComponent)GetComponent(MapComponentsLookup.Position); } }
			public bool hasPosition { get { return HasComponent(MapComponentsLookup.Position); } }
		
			public void AddPosition(int newX, int newY, int newZ) {
				var component = CreateComponent<PositionComponent>(MapComponentsLookup.Position);
				component.x = newX;
				component.y = newY;
				component.z = newZ;
				AddComponent(MapComponentsLookup.Position, component);
			}
		
			public void ReplacePosition(int newX, int newY, int newZ) {
				var component = CreateComponent<PositionComponent>(MapComponentsLookup.Position);
				component.x = newX;
				component.y = newY;
				component.z = newZ;
				ReplaceComponent(MapComponentsLookup.Position, component);
			}
		
			public void RemovePosition() {
				RemoveComponent(MapComponentsLookup.Position);
			}
		}
		'''.toString, 
		result.components.get(0).entityExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentContextExtensionForFlagComponentWithPrefix() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Finished(unique) prefix("did")
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreContext {
			
			public CoreEntity finished { get { return GetGroup(CoreMatcher.Finished).GetSingleEntity(); } }
		
			public bool didFinished {
				get { return finished != null; }
				set {
					var entity = finished;
					if(value != (entity != null)) {
						if(value) {
							CreateEntity().didFinished = true;
						} else {
							entity.Destroy();
						}
					}
				}
			}
		}
		'''.toString, 
		result.components.get(0).contextExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentContextExtensionForFlagComponent() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Finished (unique) in Core, Input
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreContext {
			
			public CoreEntity finished { get { return GetGroup(CoreMatcher.Finished).GetSingleEntity(); } }
		
			public bool isFinished {
				get { return finished != null; }
				set {
					var entity = finished;
					if(value != (entity != null)) {
						if(value) {
							CreateEntity().isFinished = true;
						} else {
							entity.Destroy();
						}
					}
				}
			}
		}
		public partial class InputContext {
			
			public InputEntity finished { get { return GetGroup(InputMatcher.Finished).GetSingleEntity(); } }
		
			public bool isFinished {
				get { return finished != null; }
				set {
					var entity = finished;
					if(value != (entity != null)) {
						if(value) {
							CreateEntity().isFinished = true;
						} else {
							entity.Destroy();
						}
					}
				}
			}
		}
		'''.toString, 
		result.components.get(0).contextExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentContextExtensionForFlagComponentWithCustomPrefix() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Finished (unique) prefix("did")
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreContext {
			
			public CoreEntity finished { get { return GetGroup(CoreMatcher.Finished).GetSingleEntity(); } }
		
			public bool didFinished {
				get { return finished != null; }
				set {
					var entity = finished;
					if(value != (entity != null)) {
						if(value) {
							CreateEntity().didFinished = true;
						} else {
							entity.Destroy();
						}
					}
				}
			}
		}
		'''.toString, 
		result.components.get(0).contextExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentContextExtensionForComponent() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Velocity (unique)
				x : i32
				y : i32
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public partial class CoreContext {
		
			public CoreEntity velocityEntity { get { return GetGroup(CoreMatcher.Velocity).GetSingleEntity(); } }
			public IVelocityComponent velocity { get { return velocityEntity.velocity; } }
			public bool hasVelocity { get { return velocityEntity != null; } }
		
			public CoreEntity SetVelocity(int newX, int newY) {
				if(hasVelocity) {
					throw new EntitasException("Could not set velocity!\n" + this + " already has an entity with VelocityComponent!",
						"You should check if the context already has a velocityEntity before setting it or use context.ReplaceVelocity().");
				}
				var entity = CreateEntity();
				entity.AddVelocity(newX, newY);
				return entity;
			}
		
			public void ReplaceVelocity(int newX, int newY) {
				var entity = velocityEntity;
				if(entity == null) {
					entity = SetVelocity(newX, newY);
				} else {
					entity.ReplaceVelocity(newX, newY);
				}
			}
		
			public void DestroyVelocity() {
				velocityEntity.Destroy();
			}
		}
		'''.toString, 
		result.components.get(0).contextExtension("A", "Core").toString
		)
		
	}
	
	@Test
	def void componentContextExtensionForNonUniqueComponent() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Velocity
				x : i32
				y : i32
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertTrue(result.components.get(0).contextExtension("A", "Core").toString.isEmpty)
		
	}
	
	@Test
	def void componentMatcherExtension() {
		val result = parseHelper.parse('''
			target A
			context Core, Input
			alias i32 : "int"
			comp Finished in Core, Input
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		
		Assert.assertEquals('''
		public sealed partial class CoreMatcher {
		
			static IMatcher<CoreEntity> _matcherFinished;
		
			public static IMatcher<CoreEntity> Finished {
				get {
					if(_matcherFinished == null) {
						var matcher = (Matcher<CoreEntity>)Matcher<CoreEntity>.AllOf(CoreComponentsLookup.Finished);
						matcher.componentNames = CoreComponentsLookup.componentNames;
						_matcherFinished = matcher;
					}
		
					return _matcherFinished;
				}
			}
		}
		public sealed partial class InputMatcher {
		
			static IMatcher<InputEntity> _matcherFinished;
		
			public static IMatcher<InputEntity> Finished {
				get {
					if(_matcherFinished == null) {
						var matcher = (Matcher<InputEntity>)Matcher<InputEntity>.AllOf(InputComponentsLookup.Finished);
						matcher.componentNames = InputComponentsLookup.componentNames;
						_matcherFinished = matcher;
					}
		
					return _matcherFinished;
				}
			}
		}
		'''.toString, 
		result.components.get(0).matcherExtension("Core").toString
		)
		
	}
}
