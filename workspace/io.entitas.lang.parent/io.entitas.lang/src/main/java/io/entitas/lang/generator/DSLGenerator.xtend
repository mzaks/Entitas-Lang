/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.generator

import com.google.inject.Inject
import io.entitas.lang.dsl.Root
import java.io.File
import java.util.List
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider

import static extension io.entitas.lang.extensions.ComponentExtensions.*
import static extension io.entitas.lang.extensions.ContextExtensions.*
import static extension io.entitas.lang.extensions.SystemExtensions.*
import static extension io.entitas.lang.extensions.TargetExtensions.*
import static extension io.entitas.lang.generator.entitas_csharp.ComponentGenerationExtension.*
import static extension io.entitas.lang.generator.entitas_csharp.ContextGenerationExtension.*
import static extension io.entitas.lang.generator.entitas_csharp.GenerationExtension.*
import static extension io.entitas.lang.generator.entitas_csharp.SystemGenerationExtension.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator extends AbstractGenerator {
	
	@Inject
	private ResourceDescriptionsProvider resourceDescriptionsProvider
	
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		val sw = new StopWatch()
//		sw.reset
		val currentRoot = resource.allContents.filter(Root).head
		var String target
		var String namespace
		var String defaultCtxName
		
		if (currentRoot.target !== null){
			target = newImmutableList(currentRoot).findTarget
		}
		
		if (currentRoot.namespace !== null){
			namespace = newImmutableList(currentRoot).findNamepsace
		}
		val foundProjectFile = fsa.isFile("../Assembly-CSharp.csproj")
		
		val prefix = if(foundProjectFile){
			fixProjectFile(fsa, "Assets\\src-gen\\")
			"../Assets/src-gen/"		
		} else {
			""			
		}
		
		
//		TODO: Fix it when gen_path target property is properly implemented
//		val path = newImmutableList(currentRoot).findPath
//		val prefix = if (path === null){
//			if(foundProjectFile){
//				"../Assets/src-gen/"		
//			} else {
//				""			
//			}
//		} else{
//			"../" + path
//		}
//		
//		if (foundProjectFile){ 
//			fixProjectFile(fsa, path ?: "Assets\\src-gen\\")
//		}
		
		if(currentRoot.context !== null){
			defaultCtxName = newImmutableList(currentRoot).findDefaultContextName
			fsa.generateFile(prefix + "EntityClasses.cs", currentRoot.context.entityClassDefinitions.addEntitasUsing.wrapWithNamespace(namespace))
			fsa.generateFile(prefix + "ContextClasses.cs", currentRoot.context.contextClassDefinitions.addEntitasUsing.wrapWithNamespace(namespace))
			fsa.generateFile(prefix + "Contexts.cs", currentRoot.context.contextsHelperClassDefinition.addEntitasUsing.wrapWithNamespace(namespace))
		}
		
		val roots = newArrayList(currentRoot)//resource.computeAllRoots
		
		if (target === null){
			target = roots.findTarget
		}
		
		if (namespace === null){
			namespace = roots.findNamepsace
		}
		
		if (defaultCtxName === null){
			defaultCtxName = roots.findDefaultContextName
		}
		
		fsa.generateFile(prefix + "ComponentLookups.cs", roots.componentLookup(defaultCtxName).addEntitasUsing.wrapWithNamespace(namespace))
		
		for (component : roots.components){ 
			fsa.generateFile(prefix + "components/" + component.componentTypeName + ".cs", '''
			«component.componentInterface(target)»
			
			«component.componentClass(target)»
			
			«component.matcherExtension(defaultCtxName)»
			
			«component.entityExtension(target, defaultCtxName)»
			
			«component.contextExtension(target, defaultCtxName)»
			'''.addEntitasUsing.wrapWithNamespace(namespace))
		}
		for (system : roots.systems){
			fsa.generateFile(prefix + "systems/Abstract" + system.systemTypeName + ".cs", 
				system.abstractSystemClass(defaultCtxName).addEntitasUsing.wrapWithNamespace(namespace)
			)
		}
//		sw.resetAndLog("Code Generation Time:")
//		println(sw.reset)
	}
	
	def fixProjectFile(IFileSystemAccess2 fsa, String path) {
		val factory = DocumentBuilderFactory.newInstance()
		val builder = factory.newDocumentBuilder()
		try{
			val document = builder.parse(fsa.readBinaryFile("../Assembly-CSharp.csproj"))
			val nodeList = document.getDocumentElement().getChildNodes()
			var generate = false
			for(i : 0..<nodeList.length){
				val topChild = nodeList.item(i)
				if (topChild.nodeName == "ItemGroup"){
					val nodesToRemove = newArrayList()
					for(j : 0..<topChild.childNodes.length){
						val node = topChild.childNodes.item(j)
						if (node.nodeName == "Compile"){
							val resourceName = node.attributes.getNamedItem("Include").getNodeValue()
							if(resourceName.startsWith(path)){
								generate = true
								nodesToRemove.add(node)
							}
						}
					}
					if(nodesToRemove.head !== null){
						val newNode1 = document.createElement("Compile")
						newNode1.setAttribute("Include", path + "**.cs")
						val newNode2 = document.createElement("Compile")
						newNode2.setAttribute("Include", path + "*\\**.cs")
						
						topChild.insertBefore(newNode1, nodesToRemove.head)
						topChild.insertBefore(newNode2, nodesToRemove.head)
					}
					for (node : nodesToRemove){
						topChild.removeChild(node)
					}
				}
			}
			if (generate){
				val transformerFactory = TransformerFactory.newInstance()
				val transformer = transformerFactory.newTransformer()
				val source = new DOMSource(document)
				val result = new StreamResult(new File(fsa.getURI("../Assembly-CSharp.csproj").path));
				transformer.transform(source, result)
			}
		} catch (Exception e) {
			
		}
		
	}
	
	def components(List<Root> roots) {
		val result = newArrayList()
		for (root : roots){
			result.addAll(root.components.map[it])
		}
		return result
	}
	
	def systems(List<Root> roots) {
		val result = newArrayList()
		for (root : roots){
			result.addAll(root.systems.map[it])
		}
		return result
	}
	
	def computeAllRoots(Resource resource) {
		val index = resourceDescriptionsProvider.createResourceDescriptions
		val roots = <Root>newLinkedList()
		for (desc : index.allResourceDescriptions){
			val res = resource.resourceSet.getResource(desc.URI, true)
			res.contents.forEach[roots.add(it as Root)]
		}
		return roots
	}
	
	def findTarget(List<Root> roots) {
		var targets = <String>newImmutableList()
		for(root : roots){
			if(root.target !== null && root.target.ids !== null){
				if (targets.empty){
					targets = root.target.ids.map[it.name]
				} else {
					throw new Exception("Multiple target definitions") // should be caught by validator first
				}
			}
		}
		return targets.get(0) // should switch it to multiple targets
	}
	
	def findPath(List<Root> roots) {
		var paths = newImmutableList()
		for(root : roots){
			if(root.target !== null && root.target.ids !== null){
				if (paths.empty){
					paths = root.target.ids.map[it.path]
				} else {
					throw new Exception("Multiple target definitions") // should be caught by validator first
				}
			}
		}
		return paths.findFirst[it.endsWith("/")] // should switch it to multiple targets
	}
	
	def findNamepsace(List<Root> roots) {
		var String namespace
		for(root : roots){
			if(root.namespace !== null){
				if (namespace === null){
					namespace = root.namespace.name
				} else {
					throw new Exception("Multiple namespace definitions") // should be caught by validator first
				}
			}
		}
		return namespace
	}
	
	def findDefaultContextName(List<Root> roots){
		var String ctxName = null
		val contextDefinitions = newArrayList()
		for(root : roots){
			if (root.context !== null){
				contextDefinitions.add(root.context)
			}
		}
		for (ctx : contextDefinitions){
			val newCtxName = ctx.defaultContextNameOrNull
			if (newCtxName !== null && ctxName !== null && newCtxName != ctxName){
				throw new Exception("Multiple default context names definitions") // should be caught by validator first
			} else {
				if (newCtxName !== null){
					ctxName = newCtxName
				}
			}
		}
		if (ctxName === null) {
			ctxName = contextDefinitions.head?.defaultContextName
		}
		return ctxName
	}
}
