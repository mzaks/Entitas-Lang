/*
 * generated by Xtext 2.11.0
 */
package io.entitas.lang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.google.inject.Inject
import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider
import io.entitas.lang.dsl.Root
import java.util.List
import static extension io.entitas.lang.extensions.ContextExtensions.*
import static extension io.entitas.lang.extensions.ComponentExtensions.*
import static extension io.entitas.lang.extensions.SystemExtensions.*
import static extension io.entitas.lang.generator.entitas_csharp.ContextGenerationExtension.*
import static extension io.entitas.lang.generator.entitas_csharp.GenerationExtension.*
import static extension io.entitas.lang.generator.entitas_csharp.ComponentGenerationExtension.*
import static extension io.entitas.lang.generator.entitas_csharp.SystemGenerationExtension.*
import org.eclipse.xtext.util.StopWatch
import io.entitas.lang.generator.entitas_csharp.FeatureGenerationExtension
import io.entitas.lang.generator.entitas_csharp.MatcherGenerationExtension

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator extends AbstractGenerator {
	
	@Inject
	private ResourceDescriptionsProvider resourceDescriptionsProvider
	
//	private String target
//	private String namespace
//	private String defaultCtxName
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val sw = new StopWatch()
		sw.reset
		val currentRoot = resource.allContents.filter(Root).head
		var String target
		var String namespace
		var String defaultCtxName
		
		if (currentRoot.target !== null){
			target = newImmutableList(currentRoot).findTarget
		}
		
		if (currentRoot.namespace !== null){
			namespace = newImmutableList(currentRoot).findNamepsace
		}
		
		if(currentRoot.context !== null){
			defaultCtxName = newImmutableList(currentRoot).findDefaultContextName
			fsa.generateFile("EntityClasses.cs", currentRoot.context.entityClassDefinitions.addEntitasUsing.wrapWithNamespace(namespace))
			fsa.generateFile("ContextClasses.cs", currentRoot.context.contextClassDefinitions.addEntitasUsing.wrapWithNamespace(namespace))
			fsa.generateFile("Contexts.cs", currentRoot.context.contextsHelperClassDefinition.addEntitasUsing.wrapWithNamespace(namespace))
			fsa.generateFile("Feature.cs", FeatureGenerationExtension.featureClass())
			fsa.generateFile("Matchers.cs", MatcherGenerationExtension.matchersClass(currentRoot.context))
			
			
		}
		
//		if(currentRoot.components.empty){
//			return
//		}
		
		val roots = resource.computeAllRoots
		
		if (target === null){
			target = roots.findTarget
		}
		
		if (namespace === null){
			namespace = roots.findNamepsace
		}
		
		if (defaultCtxName === null){
			defaultCtxName = roots.findDefaultContextName
		}
		
		fsa.generateFile("ComponentLookups.cs", roots.componentLookup(defaultCtxName).addEntitasUsing.wrapWithNamespace(namespace))
		
		for (component : roots.components){ 
			fsa.generateFile("components/" + component.componentTypeName + ".cs", '''
			«component.componentInterface(target)»
			
			«component.componentClass(target)»
			
			«component.matcherExtension(defaultCtxName)»
			
			«component.entityExtension(target, defaultCtxName)»
			
			«component.contextExtension(target, defaultCtxName)»
			'''.addEntitasUsing.wrapWithNamespace(namespace))
		}
		for (system : roots.systems){
			fsa.generateFile("systems/Abstract" + system.systemTypeName + ".cs", 
				system.abstractSystemClass(defaultCtxName).addEntitasUsing.wrapWithNamespace(namespace)
			)
		}
//		sw.resetAndLog("Code Generation Time:")
		println(sw.reset)
	}
	
	def components(List<Root> roots) {
		val result = newArrayList()
		for (root : roots){
			result.addAll(root.components.map[it])
		}
		return result
	}
	
	def systems(List<Root> roots) {
		val result = newArrayList()
		for (root : roots){
			result.addAll(root.systems.map[it])
		}
		return result
	}
	
	def computeAllRoots(Resource resource) {
		val index = resourceDescriptionsProvider.createResourceDescriptions
		val roots = <Root>newLinkedList()
		for (desc : index.allResourceDescriptions){
			val res = resource.resourceSet.getResource(desc.URI, true)
			res.contents.forEach[roots.add(it as Root)]
		}
		return roots
	}
	
	def findTarget(List<Root> roots) {
		var targets = <String>newImmutableList()
		for(root : roots){
			if(root.target !== null && root.target.ids !== null){
				if (targets.empty){
					targets = root.target.ids.map[it.name]
				} else {
					throw new Exception("Multiple target definitions") // should be caught by validator first
				}
			}
		}
		return targets.get(0) // should switch it to multiple targets
	}
	
	def findNamepsace(List<Root> roots) {
		var String namespace
		for(root : roots){
			if(root.namespace !== null){
				if (namespace === null){
					namespace = root.namespace.name
				} else {
					throw new Exception("Multiple namespace definitions") // should be caught by validator first
				}
			}
		}
		return namespace
	}
	
	def findDefaultContextName(List<Root> roots){
		var String ctxName = null
		val contextDefinitions = newArrayList()
		for(root : roots){
			if (root.context !== null){
				contextDefinitions.add(root.context)
			}
		}
		for (ctx : contextDefinitions){
			val newCtxName = ctx.defaultContextNameOrNull
			if (newCtxName !== null && ctxName !== null && newCtxName != ctxName){
				throw new Exception("Multiple default context names definitions") // should be caught by validator first
			} else {
				if (newCtxName !== null){
					ctxName = newCtxName
				}
			}
		}
		if (ctxName === null) {
			ctxName = contextDefinitions.head?.defaultContextName
		}
		return ctxName
	}
}
